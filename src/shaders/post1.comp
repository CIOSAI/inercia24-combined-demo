#version 450

/*
 * Kiyo data
 * - WORKGROUP_SIZE and NUM_IMAGES are provided by the engine
 */

layout ( local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1 ) in;
layout( binding = 0, rgba8 ) uniform image2D images[NUM_IMAGES];
layout( push_constant ) uniform PushConstants
{
    float time;
    int in_image;
    int out_image;
} constants;

/*
 * User data
 */

#define BPM 116.0
#define syncT (constants.time/(60.0/BPM))

#define R vec2(imageSize( images[ constants.out_image ] ))

#define pi acos(-1.)
#define tau (acos(-1.)*2.)

#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))

// hashes
uint seed = 12612;
uint hashi( uint x){
    x ^= x >> 16;x *= 0x7feb352dU;x ^= x >> 15;x *= 0x846ca68bU;x ^= x >> 16;
    return x;
}

#define hash_f_s(s)  ( float( hashi(uint(s)) ) / float( 0xffffffffU ) )
#define hash_f()  ( float( seed = hashi(seed) ) / float( 0xffffffffU ) )
#define hash_v2()  vec2(hash_f(),hash_f())
#define hash_v3()  vec3(hash_f(),hash_f(),hash_f())
#define hash_v4()  vec3(hash_f(),hash_f(),hash_f(),hash_f())
#define hash_v3_s(s)  ( vec3(hash_f_s(s),hash_f_s(hashi(s)),hash_f_s(hashi(hashi(s)))) )

// https://www.shadertoy.com/view/XlXcW4
vec3 hash3f( vec3 s ) {
  uvec3 r = floatBitsToUint( s );
  r = ( ( r >> 16u ) ^ r.yzx ) * 1111111111u;
  r = ( ( r >> 16u ) ^ r.yzx ) * 1111111111u;
  r = ( ( r >> 16u ) ^ r.yzx ) * 1111111111u;
  return vec3( r ) / float( -1u );
}

vec2 sample_disk(){
    vec2 r = hash_v2();
    return vec2(sin(r.x*tau),cos(r.x*tau))*sqrt(r.y);
}

uint seed_gen(vec3 p){
    return uint(p.x+66341.)*666562+uint(p.y+54324.)*3554+uint(p.z+61441.);
}

vec3 noise(vec3 p){
    vec3 bl_back = hash3f(floor(p));
    vec3 br_back = hash3f(floor(p)+vec3(1,0,0));
    vec3 tr_back = hash3f(floor(p)+vec3(1,1,0));
    vec3 tl_back = hash3f(floor(p)+vec3(0,1,0));
    vec3 bl_front = hash3f(floor(p)+vec3(0,0,1));
    vec3 br_front = hash3f(floor(p)+vec3(1,0,1));
    vec3 tr_front = hash3f(floor(p)+vec3(1,1,1));
    vec3 tl_front = hash3f(floor(p)+vec3(0,1,1));
    return 
    mix(
    mix(
    mix(bl_back, br_back, smoothstep(0.,1.,fract(p.x))),
    mix(tl_back, tr_back, smoothstep(0.,1.,fract(p.x))),
    smoothstep(0.,1.,fract(p.y))
    ),
    mix(
    mix(bl_front, br_front, smoothstep(0.,1.,fract(p.x))),
    mix(tl_front, tr_front, smoothstep(0.,1.,fract(p.x))),
    smoothstep(0.,1.,fract(p.y))
    ),
    smoothstep(0.,1.,fract(p.z))
    )
    ;
}

// point projection
ivec2 proj_p(vec3 p){
  p *= 0.6;
  
  // depth of field
  p.xy += sample_disk() * abs(p.z - 5.)*0.04;
  
  // convert point to ivec2. From 0 to resolution.xy
  ivec2 q = ivec2((p.xy + vec2(R.x/R.y,1)*0.5)*vec2(R.y/R.x,1)*R);
  if(any(greaterThan(q, ivec2(R))) || any(lessThan(q, ivec2(0)))){
      q = ivec2(-1);
  }
  return q;
}


void store_pixel(ivec2 px_coord, vec3 col){
  // colour quantized to integer.
  ivec3 quant_col = ivec3(col * 1000);
  // no clue why it wants ivec4() here...
  imageStore(images[ constants.out_image ], px_coord, vec4(col,1)); 
}

// void add_to_pixel(ivec2 px_coord, vec3 col){
//   // colour quantized to integer.
//   ivec3 quant_col = ivec3(col * 1000);
//   imageAtomicAdd(images[ constants.out_image ], px_coord, vec4(col,1)); 
// }

vec3 read_pixel(ivec2 px_coord){
  return imageLoad(images[ constants.in_image ], px_coord).rgb; 
}

vec3 hsv2rgb(vec3 c)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

vec3 rgb2hsv(vec3 c)
{
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

vec3 samp( vec2 p )
{
    return read_pixel(ivec2( p*R.y + .5*R + .5 ));
}

vec3 glitcher( vec2 p )
{
    float t = syncT;
    float density = 4.;
    vec2 scale = vec2(1,4);

    vec2 i_uv = floor(p*scale*density),
         f_uv = fract(p*scale*density);

    seed = uint((462.+i_uv.y)*332.+(i_uv.x+325)*38 - t);

    float rand = hash_f();
    if(rand<.01){
        i_uv = floor((hash_v2()*2.-1.)*scale*floor(density*.5));
    }

    return vec3((i_uv+f_uv)/scale/density,rand);
}

void main()
{
    ivec2 p = ivec2( gl_GlobalInvocationID.xy );
    ivec2 screenSize = imageSize( images[ constants.out_image ] );
    if( p.x > screenSize.x || p.y > screenSize.y )
    {
        return;
    }

    vec2 uv = (vec2(p) - .5*R)/R.y;

    float time = syncT;

    vec3 n_uv = glitcher(uv);

    vec3 col = 1.-samp(n_uv.xy);
    if(n_uv.z>.9999){
        col = 1.-col;
    }
    else if(n_uv.z>.9995){
        col.gb = vec2(1);
    }

    store_pixel(p, col);
}